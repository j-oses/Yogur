/* Jorge Osés Grijalba
 * Álvaro Rodríguez García
 */

package yogur.cup;

import java_cup.runtime.*;
import java.util.*;

import yogur.utils.CompilationException;
import yogur.tree.*;
import yogur.tree.declaration.*;
import yogur.tree.declaration.declarator.*;
import yogur.tree.expression.*;
import yogur.tree.expression.identifier.*;
import yogur.tree.statement.*;
import yogur.tree.type.*;

scan with {: return getScanner().next_token(); :};

parser code {:
	private List<CompilationException> exceptions = new ArrayList<>();

	public List<CompilationException> getExceptions() {
		return exceptions;
	}

	public void syntax_error(Symbol symbol) {
		exceptions.add(new CompilationException(symbol, CompilationException.Scope.SyntacticalAnalyzer));
	}
:}

terminal Integer INT;
terminal Boolean BOOL;
terminal String ID, TYPE;
terminal DELIMITER, COMMA;
terminal ASSIGN, SUM, SUBS, PROD, DIV, MOD, AND, OR, NOT, DOT, LRANGE, RRANGE, EQ, NEQ, GEQ, GT, LEQ, LT, COLON, ARROW;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACKET, RBRACKET;
terminal DEF, VAR, CLASS, IF, ELSE, WHILE, FOR, IN, TO;

non terminal Program S;
non terminal Statement Inst;
non terminal FunctionOrVarDeclaration Dec;
non terminal VarDeclaration DVar, DVarN;
non terminal FuncDeclaration DProc, DFunc;
non terminal ClassDeclaration DClass;
non terminal Block Block;

non terminal IfStructure If;
non terminal WhileStructure While;
non terminal ForStructure For;
non terminal Assignment Ass;

non terminal Expression Exp, Exp0, Exp1, Exp2, Exp3, Exp4, Exp5, Exp6, Exp7;
non terminal BinaryOperation.Operator Op, Op0, Op1, Op2, Op3, Op4;
non terminal UnaryOperation.Operator Op5;
non terminal Declarator Declarator, Declarator0;
non terminal Type VarType;
non terminal ArrayIndex Index;
non terminal List<Expression> CommaExp;
non terminal ArrayList<Argument> ArgList, Args;
non terminal Argument Arg;
non terminal List<FunctionOrVarDeclaration> ClassBody;
non terminal List<Statement> BlockBody;
non terminal Block Else;


S ::= S:p DELIMITER Inst:i				{: RESULT = new Program(p, i); :}
	| S:p DELIMITER Dec:d				{: RESULT = new Program(p, d); :}
	| S:p DELIMITER DClass:d			{: RESULT = new Program(p, d); :}
	| S:p DELIMITER						{: RESULT = p; :}
	| Inst:i							{: RESULT = new Program(i); :}
	| Dec:d 							{: RESULT = new Program(d); :}
	| DClass:d 							{: RESULT = new Program(d); :}
	| 									{: RESULT = new Program(); :}
;
Inst ::= If:i							{: RESULT = i; :}
	| While:i							{: RESULT = i; :}
	| For:i								{: RESULT = i; :}
	| Ass:i								{: RESULT = i; :}
	| Block:i							{: RESULT = i; :}
	| DVar:i							{: RESULT = i; :}
;
Dec ::= DProc:d							{: RESULT = d; :}
	| DFunc:d							{: RESULT = d; :}
;

DVar ::= VAR Arg:a														{: RESULT = new VarDeclaration(a); RESULT.setLineCol(aleft, aright); :}
	| VAR Arg:a ASSIGN Exp:e											{: RESULT = new VarDeclaration(a, e); RESULT.setLineCol(aleft, aright); :}
;
DVarN ::= VAR Arg:a														{: RESULT = new VarDeclaration(a); RESULT.setLineCol(aleft, aright); :}
;
DProc ::= DEF ID:id LPAREN ArgList:args RPAREN Block:b					{: RESULT = new FuncDeclaration(id, args, b); RESULT.setLineCol(idleft, idright); :}
;
DFunc ::= DEF ID:id LPAREN ArgList:args RPAREN ARROW Arg:rarg Block:b	{: RESULT = new FuncDeclaration(id, args, rarg, b); RESULT.setLineCol(idleft, idright); :}
;
DClass ::= CLASS TYPE:t LBRACKET ClassBody:insts RBRACKET				{: RESULT = new ClassDeclaration(t, insts); RESULT.setLineCol(tleft, tright); :}
;
Block ::= LBRACKET BlockBody:insts RBRACKET								{: RESULT = new Block(insts); :}
;

If ::= IF Exp:exp Block:b Else:elsee		{: RESULT = new IfStructure(exp, b, elsee); :}
;
Else ::= ELSE If:ife						{: List<Statement> insts = new ArrayList<>(); insts.add(ife); RESULT = new Block(insts); :}
	| ELSE Block:b							{: RESULT = b; :}
	| 										{: RESULT = null; :}
;
While ::= WHILE Exp:e Block:b				{: RESULT = new WhileStructure(e, b); :}
;
For ::= FOR ID:id IN Exp:start TO Exp:end Block:b		{: RESULT = new ForStructure(new BaseDeclarator(id), start, end, b); :}
;
Ass ::= Declarator:d ASSIGN:eq Exp:e			{: RESULT = new Assignment(d, e); RESULT.setLineCol(eqleft, eqright); :}
;

Declarator ::= Declarator:d DOT:dt ID:id		{: RESULT = new DotDeclarator(d, id); RESULT.setLineCol(dtleft, dtright); :}
	| Declarator:d Index:i						{: RESULT = new ArrayDeclarator(d, i); RESULT.setLineCol(ileft, iright); :}
	| Declarator0:d								{: RESULT = d; :}
;
Declarator0 ::= LPAREN Declarator:d RPAREN		{: RESULT = d; :}
	| ID:id										{: RESULT = new BaseDeclarator(id); RESULT.setLineCol(idleft, idright); :}
;

Exp ::= Exp:e1 Op:o Exp0:e2		{: RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); :}
	| Exp0:e					{: RESULT = e; :}
;
Exp0 ::= Exp0:e1 Op0:o Exp1:e2	{: RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); :}
	| Exp1:e					{: RESULT = e; :}
;
Exp1 ::= Exp1:e1 Op1:o Exp2:e2	{: RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); :}
	| Exp2:e					{: RESULT = e; :}
;
Exp2 ::= Exp2:e1 Op2:o Exp3:e2	{: RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); :}
	| Exp3:e					{: RESULT = e; :}
;
Exp3 ::= Exp3:e1 Op3:o Exp4:e2	{: RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); :}	
	| Exp4:e					{: RESULT = e; :}
;
Exp4 ::= Exp4:e1 Op4:o Exp5:e2	{: RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); :}
	| Exp5:e					{: RESULT = e; :}
;
Exp5 ::= Op5:o Exp5:e			{: RESULT = new UnaryOperation(e, o); RESULT.setLineCol(oleft, oright); :}
	| Exp6:e					{: RESULT = e; :}
;
Exp6 ::= Exp6:e DOT:d ID:id					{: RESULT = new DotIdentifier(e, id); RESULT.setLineCol(dleft, dright); :}
	| Exp6:e Index:i						{: RESULT = new ArrayIdentifier(e, i); RESULT.setLineCol(ileft, iright); :}
	| Exp6:e LPAREN:l CommaExp:exps RPAREN	{: RESULT = new FunctionCall(e, exps); RESULT.setLineCol(lleft, lright); :}
	| Exp6:e LPAREN:l RPAREN				{: RESULT = new FunctionCall(e, new ArrayList<>()); RESULT.setLineCol(lleft, lright); :}
	| Exp7:e								{: RESULT = e; :}
;
Exp7 ::= LPAREN Exp:e RPAREN	{: RESULT = e; :}
	| ID:id						{: RESULT = new BaseIdentifier(id); RESULT.setLineCol(idleft, idright); :}
	| INT:intLit				{: RESULT = new Constant(intLit); RESULT.setLineCol(intLitleft, intLitright); :}
	| BOOL:boolLit				{: RESULT = new Constant(boolLit); RESULT.setLineCol(boolLitleft, boolLitright); :}
;

Op ::= OR		{: RESULT = BinaryOperation.Operator.OR; :}
;
Op0 ::= AND		{: RESULT = BinaryOperation.Operator.AND; :}
;
Op1 ::= EQ		{: RESULT = BinaryOperation.Operator.EQ; :}
	| NEQ		{: RESULT = BinaryOperation.Operator.NEQ; :}
;
Op2 ::= LT		{: RESULT = BinaryOperation.Operator.LT; :}
	| LEQ		{: RESULT = BinaryOperation.Operator.LEQ; :}
	| GT		{: RESULT = BinaryOperation.Operator.GT; :}
	| GEQ		{: RESULT = BinaryOperation.Operator.GEQ; :}
;
Op3 ::=	SUM		{: RESULT = BinaryOperation.Operator.SUM; :}
	| SUBS		{: RESULT = BinaryOperation.Operator.SUBS; :}
;
Op4 ::= PROD	{: RESULT = BinaryOperation.Operator.PROD; :}
	| DIV		{: RESULT = BinaryOperation.Operator.DIV; :}
	| MOD		{: RESULT = BinaryOperation.Operator.MOD; :}
;
Op5 ::= SUBS	{: RESULT = UnaryOperation.Operator.NEG; :}
	| NOT		{: RESULT = UnaryOperation.Operator.NOT; :}
;

VarType ::= VarType:t LSQUARE INT:i RSQUARE		{: RESULT = new ArrayType(t, i); :}
	| TYPE:t									{: RESULT = Type.fromName(t); RESULT.setLineCol(tleft, tright); :}
;
Index ::= LSQUARE Exp:e RSQUARE				{: RESULT = new ArrayIndex(e, ArrayIndex.AccessType.INDEX); :}
	| LSQUARE Exp:e RRANGE					{: RESULT = new ArrayIndex(e, ArrayIndex.AccessType.LEFT_RANGE); :}
	| LRANGE Exp:e RSQUARE					{: RESULT = new ArrayIndex(e, ArrayIndex.AccessType.RIGHT_RANGE); :}
	| LSQUARE Exp:e1 COLON Exp:e2 RSQUARE	{: RESULT = new ArrayIndex(e1, e2, ArrayIndex.AccessType.LEFT_RIGHT_RANGE); :}
;
CommaExp ::= CommaExp:exps COMMA Exp:e		{: exps.add(e); RESULT = exps; :}
	| Exp:e									{: RESULT = new ArrayList<>(); RESULT.add(e); :}
;
ArgList ::= Args:args						{: RESULT = args; :}
	| 										{: RESULT = new ArrayList<>(); :}
;
Args ::= Args:args COMMA Arg:arg			{: args.add(arg); RESULT = args; :}
	| Arg:arg								{: RESULT = new ArrayList<>(); RESULT.add(arg); :}
;
Arg ::= ID:id COLON:c VarType:t				{: RESULT = new Argument(id, t); RESULT.setLineCol(cleft, cright); :}
;
ClassBody ::= ClassBody:b DELIMITER Dec:d	{: b.add(d); RESULT = b; :}
	| ClassBody:b DELIMITER DVarN:d			{: b.add(d); RESULT = b; :}
	| Dec:d									{: RESULT = new ArrayList<>(); RESULT.add(d); :}
	| DVarN:d								{: RESULT = new ArrayList<>(); RESULT.add(d); :}
;
BlockBody ::= BlockBody:is DELIMITER Inst:i			{: is.add(i); RESULT = is; :}
	| Inst:i										{: RESULT = new ArrayList<>(); RESULT.add(i); :}
	|												{: RESULT = new ArrayList<>(); :}
;
