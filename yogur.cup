package yogur.cup;

import java_cup.runtime.*;
import java.util.*;

import yogur.jlex.YogurLex;

action code {:
:}

scan with {: return getScanner().next_token(); :};

parser code {:
	public static void main (String args[]) throws Exception{
		new YogurParser(new YogurLex(System.in)).parse();
	}
:}

terminal INT, BOOL, ID, TYPE, DELIMITER, COMMA;
terminal ASSIGN, SUM, SUBS, PROD, DIV, MOD, AND, OR, NOT, DOT, LRANGE, RRANGE, EQ, NEQ, GEQ, GT, LEQ, LT, COLON, ARROW;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACKET, RBRACKET;
terminal DEF, VAR, CLASS, IF, ELSE, WHILE, FOR, IN, TO;

non terminal S, Inst, Dec, DVar, DProc, DFunc, DClass, Block;
non terminal If, While, For, Ass;
non terminal Exp, Exp1, Exp2, Exp3, Exp4, Exp5, Exp6, Exp7;
non terminal VarType, VarId, DotId, Index, FuncCall, CommaExp, FuncId, ArgList, Args, Arg, ClassBody, BlockBody, Elsif, Else;


S ::= S DELIMITER Inst | S DELIMITER Dec | S DELIMITER DClass | S DELIMITER | Inst | Dec | DClass | ;
Inst ::= If | While | For | Ass | Block | DVar;
Dec ::= DProc | DFunc;

DVar ::= VAR Arg | VAR Arg ASSIGN Exp;
DProc ::= DEF FuncId LPAREN ArgList RPAREN Block;
DFunc ::= DEF FuncId LPAREN ArgList RPAREN ARROW Arg Block;
DClass ::= CLASS TYPE LBRACKET ClassBody RBRACKET;
Block ::= LBRACKET BlockBody RBRACKET;

If ::= IF Exp Block Elsif Else;
Elsif ::= Elsif ELSE IF Exp Block | ELSE IF Exp Block;
Else ::= ELSE Block;
While ::= WHILE Exp Block;
For ::= FOR ID IN Exp TO Exp Block;
Ass ::= VarId ASSIGN Exp;

Exp ::= SUBS Exp | NOT Exp | Exp1;
Exp1 ::= Exp1 PROD Exp2 | Exp1 DIV Exp2 | Exp1 MOD Exp2 | Exp2;
Exp2 ::= Exp2 SUM Exp3 | Exp2 SUBS Exp3 | Exp3;
Exp3 ::= Exp3 LT Exp4 | Exp3 LEQ Exp4 | Exp3 GT Exp4 | Exp3 GEQ Exp4 | Exp4;
Exp4 ::= Exp4 EQ Exp5 | Exp4 NEQ Exp5 | Exp5;
Exp5 ::= Exp5 AND Exp6 | Exp6;
Exp6 ::= Exp6 OR Exp7 | Exp7;
Exp7 ::= LPAREN Exp RPAREN | VarId | FuncCall | INT | BOOL;

VarType ::= VarType LSQUARE INT RSQUARE | TYPE;
VarId ::= VarId Index | DotId;
DotId ::= DotId DOT ID | ID;
Index ::= LSQUARE Exp RSQUARE | LSQUARE Exp RRANGE | LRANGE Exp RSQUARE | LSQUARE Exp COLON Exp RSQUARE;
FuncCall ::= DotId LPAREN CommaExp RPAREN | DotId LPAREN RPAREN;
CommaExp ::= CommaExp COMMA Exp | Exp;
FuncId ::= ID;
ArgList ::= Args | ;
Args ::= Args COMMA Arg;
Arg ::= ID COLON VarType;
ClassBody ::= ClassBody DELIMITER Dec | ClassBody DELIMITER DVar | Dec | DVar;
BlockBody ::= BlockBody DELIMITER Inst | Inst;
