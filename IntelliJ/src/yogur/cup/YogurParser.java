
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package yogur.cup;

import java_cup.runtime.*;
import java.util.*;
import yogur.utils.CompilationException;
import yogur.tree.*;
import yogur.tree.declaration.*;
import yogur.tree.expression.*;
import yogur.tree.expression.identifier.*;
import yogur.tree.statement.*;
import yogur.tree.type.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class YogurParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public YogurParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public YogurParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public YogurParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\002\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\004" +
    "\000\002\005\006\000\002\006\004\000\002\007\010\000" +
    "\002\010\012\000\002\011\007\000\002\012\005\000\002" +
    "\013\006\000\002\046\004\000\002\046\004\000\002\046" +
    "\002\000\002\014\005\000\002\015\011\000\002\016\005" +
    "\000\002\017\005\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\003\000\002\023\005\000\002\023" +
    "\003\000\002\024\005\000\002\024\003\000\002\025\004" +
    "\000\002\025\003\000\002\026\005\000\002\026\006\000" +
    "\002\026\006\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\006\000\002\037\003" +
    "\000\002\040\005\000\002\040\003\000\002\041\003\000" +
    "\002\041\002\000\002\042\005\000\002\042\003\000\002" +
    "\043\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\004\000\002\044\003\000\002\044\003\000\002\044\002" +
    "\000\002\045\005\000\002\045\004\000\002\045\003\000" +
    "\002\045\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\040\002\ufff9\004\007\005\042\006\017\010" +
    "\ufff9\014\004\021\012\033\015\037\016\041\023\042\046" +
    "\043\006\044\014\046\010\047\043\001\002\000\016\004" +
    "\uffbe\005\uffbe\006\uffbe\014\uffbe\021\uffbe\033\uffbe\001\002" +
    "\000\010\002\ufff6\010\ufff6\040\ufff6\001\002\000\004\007" +
    "\176\001\002\000\062\002\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\051" +
    "\uffcc\001\002\000\016\004\007\005\042\006\017\014\004" +
    "\021\012\033\015\001\002\000\006\002\170\010\167\001" +
    "\002\000\016\004\uffbd\005\uffbd\006\uffbd\014\uffbd\021\uffbd" +
    "\033\uffbd\001\002\000\010\002\ufff2\010\ufff2\040\ufff2\001" +
    "\002\000\016\004\007\005\042\006\017\014\004\021\012" +
    "\033\015\001\002\000\016\004\007\005\042\006\017\014" +
    "\004\021\012\033\015\001\002\000\034\004\007\005\042" +
    "\006\017\010\uffaa\014\004\021\012\033\015\037\016\040" +
    "\uffaa\042\046\044\014\046\010\047\043\001\002\000\062" +
    "\002\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\051\uffcd\001\002\000\006" +
    "\002\ufffc\010\ufffc\001\002\000\010\002\ufff0\010\ufff0\040" +
    "\ufff0\001\002\000\006\002\ufffa\010\ufffa\001\002\000\004" +
    "\006\136\001\002\000\010\002\ufff1\010\ufff1\040\ufff1\001" +
    "\002\000\062\002\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\051\uffcf\001" +
    "\002\000\062\002\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\124\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\033\123" +
    "\034\uffd4\035\122\036\uffd4\037\uffd4\040\uffd4\051\uffd4\001" +
    "\002\000\014\002\ufff4\010\ufff4\012\120\020\054\040\ufff4" +
    "\001\002\000\010\002\ufff3\010\ufff3\040\ufff3\001\002\000" +
    "\010\002\ufff5\010\ufff5\040\ufff5\001\002\000\054\002\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\034\uffd6\036\uffd6\037\uffd6\040\uffd6\051" +
    "\uffd6\001\002\000\010\002\ufff8\010\ufff8\040\ufff8\001\002" +
    "\000\054\002\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\077\016\100\017\uffd8\020\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\034\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\051\uffd8\001\002\000\016\004\007\005\042" +
    "\006\017\014\004\021\012\033\015\001\002\000\050\002" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\073\014\074\017\uffda" +
    "\020\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\034\uffda\036\uffda\037\uffda\040\uffda\051\uffda\001\002" +
    "\000\044\002\uffdc\010\uffdc\011\uffdc\012\uffdc\017\uffdc\020" +
    "\uffdc\023\uffdc\024\uffdc\025\070\026\067\027\071\030\066" +
    "\034\uffdc\036\uffdc\037\uffdc\040\uffdc\051\uffdc\001\002\000" +
    "\034\002\uffde\010\uffde\011\uffde\012\uffde\017\uffde\020\uffde" +
    "\023\062\024\063\034\uffde\036\uffde\037\uffde\040\uffde\051" +
    "\uffde\001\002\000\030\002\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\017\057\020\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\051" +
    "\uffe0\001\002\000\062\002\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\051" +
    "\uffcb\001\002\000\004\006\111\001\002\000\010\002\ufff7" +
    "\010\ufff7\040\ufff7\001\002\000\006\002\ufffb\010\ufffb\001" +
    "\002\000\004\006\047\001\002\000\004\031\103\001\002" +
    "\000\012\002\uffef\010\uffef\012\051\040\uffef\001\002\000" +
    "\016\004\007\005\042\006\017\014\004\021\012\033\015" +
    "\001\002\000\012\002\uffee\010\uffee\020\054\040\uffee\001" +
    "\002\000\016\004\007\005\042\006\017\014\004\021\012" +
    "\033\015\001\002\000\016\004\uffca\005\uffca\006\uffca\014" +
    "\uffca\021\uffca\033\uffca\001\002\000\030\002\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\017\057\020\uffe1\034\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\051\uffe1\001\002\000\016\004\007\005\042" +
    "\006\017\014\004\021\012\033\015\001\002\000\016\004" +
    "\uffc9\005\uffc9\006\uffc9\014\uffc9\021\uffc9\033\uffc9\001\002" +
    "\000\034\002\uffdf\010\uffdf\011\uffdf\012\uffdf\017\uffdf\020" +
    "\uffdf\023\062\024\063\034\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\051\uffdf\001\002\000\016\004\007\005\042\006\017\014" +
    "\004\021\012\033\015\001\002\000\016\004\uffc8\005\uffc8" +
    "\006\uffc8\014\uffc8\021\uffc8\033\uffc8\001\002\000\016\004" +
    "\uffc7\005\uffc7\006\uffc7\014\uffc7\021\uffc7\033\uffc7\001\002" +
    "\000\044\002\uffdd\010\uffdd\011\uffdd\012\uffdd\017\uffdd\020" +
    "\uffdd\023\uffdd\024\uffdd\025\070\026\067\027\071\030\066" +
    "\034\uffdd\036\uffdd\037\uffdd\040\uffdd\051\uffdd\001\002\000" +
    "\016\004\007\005\042\006\017\014\004\021\012\033\015" +
    "\001\002\000\016\004\uffc6\005\uffc6\006\uffc6\014\uffc6\021" +
    "\uffc6\033\uffc6\001\002\000\016\004\uffc4\005\uffc4\006\uffc4" +
    "\014\uffc4\021\uffc4\033\uffc4\001\002\000\016\004\uffc3\005" +
    "\uffc3\006\uffc3\014\uffc3\021\uffc3\033\uffc3\001\002\000\016" +
    "\004\uffc5\005\uffc5\006\uffc5\014\uffc5\021\uffc5\033\uffc5\001" +
    "\002\000\050\002\uffdb\010\uffdb\011\uffdb\012\uffdb\013\073" +
    "\014\074\017\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\051\uffdb\001\002\000\016\004\uffc2\005\uffc2\006\uffc2\014" +
    "\uffc2\021\uffc2\033\uffc2\001\002\000\016\004\uffc1\005\uffc1" +
    "\006\uffc1\014\uffc1\021\uffc1\033\uffc1\001\002\000\016\004" +
    "\007\005\042\006\017\014\004\021\012\033\015\001\002" +
    "\000\054\002\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\077\016\100\017\uffd9\020\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\034\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\051\uffd9\001\002\000\016\004\uffc0\005\uffc0" +
    "\006\uffc0\014\uffc0\021\uffc0\033\uffc0\001\002\000\016\004" +
    "\uffbf\005\uffbf\006\uffbf\014\uffbf\021\uffbf\033\uffbf\001\002" +
    "\000\016\004\007\005\042\006\017\014\004\021\012\033" +
    "\015\001\002\000\054\002\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\034\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\051\uffd7\001\002\000\004\007" +
    "\105\001\002\000\022\002\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\034\uffb4\035\106\037\uffb4\040\uffb4\001\002\000\022\002" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\034\uffbb\035\uffbb\037\uffbb" +
    "\040\uffbb\001\002\000\004\004\107\001\002\000\004\036" +
    "\110\001\002\000\022\002\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\034\uffbc\035\uffbc\037\uffbc\040\uffbc\001\002\000\004\050" +
    "\112\001\002\000\016\004\007\005\042\006\017\014\004" +
    "\021\012\033\015\001\002\000\006\020\054\051\114\001" +
    "\002\000\016\004\007\005\042\006\017\014\004\021\012" +
    "\033\015\001\002\000\006\020\054\037\016\001\002\000" +
    "\010\002\uffe3\010\uffe3\040\uffe3\001\002\000\054\002\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\051" +
    "\uffd5\001\002\000\016\004\007\005\042\006\017\014\004" +
    "\021\012\033\015\001\002\000\012\002\uffe2\010\uffe2\020" +
    "\054\040\uffe2\001\002\000\016\004\007\005\042\006\017" +
    "\014\004\021\012\033\015\001\002\000\020\004\007\005" +
    "\042\006\017\014\004\021\012\033\015\034\126\001\002" +
    "\000\004\006\125\001\002\000\062\002\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\051\uffd3\001\002\000\062\002\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\051\uffd0\001\002\000\006\011\131\034\132\001" +
    "\002\000\010\011\uffb9\020\054\034\uffb9\001\002\000\016" +
    "\004\007\005\042\006\017\014\004\021\012\033\015\001" +
    "\002\000\062\002\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\051\uffd1\001" +
    "\002\000\010\011\uffba\020\054\034\uffba\001\002\000\006" +
    "\020\054\036\135\001\002\000\062\002\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\051\uffd2\001\002\000\004\033\137\001\002\000" +
    "\006\006\047\034\uffb7\001\002\000\006\011\150\034\uffb8" +
    "\001\002\000\004\034\143\001\002\000\006\011\uffb5\034" +
    "\uffb5\001\002\000\006\032\145\037\016\001\002\000\010" +
    "\002\uffec\010\uffec\040\uffec\001\002\000\004\006\047\001" +
    "\002\000\004\037\016\001\002\000\010\002\uffeb\010\uffeb" +
    "\040\uffeb\001\002\000\004\006\047\001\002\000\006\011" +
    "\uffb6\034\uffb6\001\002\000\006\010\154\040\155\001\002" +
    "\000\006\010\uffab\040\uffab\001\002\000\034\004\007\005" +
    "\042\006\017\010\uffac\014\004\021\012\033\015\037\016" +
    "\040\uffac\042\046\044\014\046\010\047\043\001\002\000" +
    "\012\002\uffe9\010\uffe9\040\uffe9\045\uffe9\001\002\000\006" +
    "\010\uffad\040\uffad\001\002\000\006\020\054\034\160\001" +
    "\002\000\062\002\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\051\uffce\001" +
    "\002\000\006\020\054\037\016\001\002\000\012\002\uffe5" +
    "\010\uffe5\040\uffe5\045\163\001\002\000\006\037\016\044" +
    "\014\001\002\000\010\002\uffe8\010\uffe8\040\uffe8\001\002" +
    "\000\010\002\uffe6\010\uffe6\040\uffe6\001\002\000\010\002" +
    "\uffe7\010\uffe7\040\uffe7\001\002\000\040\002\ufffd\004\007" +
    "\005\042\006\017\010\ufffd\014\004\021\012\033\015\037" +
    "\016\041\023\042\046\043\006\044\014\046\010\047\043" +
    "\001\002\000\004\002\000\001\002\000\006\002\001\010" +
    "\001\001\002\000\006\002\ufffe\010\ufffe\001\002\000\006" +
    "\002\uffff\010\uffff\001\002\000\006\020\054\037\016\001" +
    "\002\000\010\002\uffe4\010\uffe4\040\uffe4\001\002\000\004" +
    "\037\177\001\002\000\012\010\uffae\040\uffae\041\023\042" +
    "\200\001\002\000\004\006\047\001\002\000\006\010\204" +
    "\040\205\001\002\000\006\010\uffb0\040\uffb0\001\002\000" +
    "\006\010\uffaf\040\uffaf\001\002\000\012\010\uffb1\040\uffb1" +
    "\041\023\042\200\001\002\000\006\002\uffea\010\uffea\001" +
    "\002\000\006\010\uffb3\040\uffb3\001\002\000\006\010\uffb2" +
    "\040\uffb2\001\002\000\006\010\uffed\040\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\056\002\010\003\017\004\044\005\012\007" +
    "\023\010\020\011\021\012\027\013\032\014\043\015\004" +
    "\016\030\017\026\020\040\021\037\022\036\023\035\024" +
    "\033\025\031\026\025\027\024\036\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\017\173\020\040\021\037\022\036\023\035" +
    "\024\033\025\031\026\025\027\024\036\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\017\160\020\040\021\037\022\036\023\035\024\033\025" +
    "\031\026\025\027\024\036\034\001\001\000\026\017\156" +
    "\020\040\021\037\022\036\023\035\024\033\025\031\026" +
    "\025\027\024\036\034\001\001\000\046\003\152\005\012" +
    "\012\027\013\032\014\043\015\004\016\030\017\026\020" +
    "\040\021\037\022\036\023\035\024\033\025\031\026\025" +
    "\027\024\036\034\045\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\100\001\001\000\012\025\116\026\025\027\024\036\034" +
    "\001\001\000\004\034\074\001\001\000\004\033\064\001" +
    "\001\000\004\032\060\001\001\000\004\031\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\017\051\020\040\021\037\022" +
    "\036\023\035\024\033\025\031\026\025\027\024\036\034" +
    "\001\001\000\004\030\052\001\001\000\024\020\054\021" +
    "\037\022\036\023\035\024\033\025\031\026\025\027\024" +
    "\036\034\001\001\000\002\001\001\000\004\031\055\001" +
    "\001\000\022\021\057\022\036\023\035\024\033\025\031" +
    "\026\025\027\024\036\034\001\001\000\002\001\001\000" +
    "\004\032\060\001\001\000\020\022\063\023\035\024\033" +
    "\025\031\026\025\027\024\036\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\064\001\001\000\016" +
    "\023\071\024\033\025\031\026\025\027\024\036\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\075\025\031\026\025" +
    "\027\024\036\034\001\001\000\004\035\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\101\026\025" +
    "\027\024\036\034\001\001\000\002\001\001\000\004\037" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\017\112\020\040\021\037\022\036\023\035" +
    "\024\033\025\031\026\025\027\024\036\034\001\001\000" +
    "\004\030\052\001\001\000\026\017\114\020\040\021\037" +
    "\022\036\023\035\024\033\025\031\026\025\027\024\036" +
    "\034\001\001\000\006\012\115\030\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\017\120\020\040\021" +
    "\037\022\036\023\035\024\033\025\031\026\025\027\024" +
    "\036\034\001\001\000\004\030\052\001\001\000\026\017" +
    "\133\020\040\021\037\022\036\023\035\024\033\025\031" +
    "\026\025\027\024\036\034\001\001\000\030\017\127\020" +
    "\040\021\037\022\036\023\035\024\033\025\031\026\025" +
    "\027\024\036\034\040\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\052\001\001\000\026\017\132\020\040\021\037\022" +
    "\036\023\035\024\033\025\031\026\025\027\024\036\034" +
    "\001\001\000\002\001\001\000\004\030\052\001\001\000" +
    "\004\030\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\140\042\137\043\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\143" +
    "\001\001\000\002\001\001\000\004\043\145\001\001\000" +
    "\004\012\146\001\001\000\002\001\001\000\004\043\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\155\005\012\012\027\013\032\014\043" +
    "\015\004\016\030\017\026\020\040\021\037\022\036\023" +
    "\035\024\033\025\031\026\025\027\024\036\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\052\001" +
    "\001\000\002\001\001\000\006\012\161\030\052\001\001" +
    "\000\004\046\163\001\001\000\006\012\164\013\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\003\170\004\172\005\012\007\023\010\020\011" +
    "\171\012\027\013\032\014\043\015\004\016\030\017\026" +
    "\020\040\021\037\022\036\023\035\024\033\025\031\026" +
    "\025\027\024\036\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\174\030\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\201\006\202\007\023\010\020\044\200\001" +
    "\001\000\004\043\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\205\006\206\007" +
    "\023\010\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$YogurParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$YogurParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$YogurParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private List<CompilationException> exceptions = new ArrayList<>();

	public List<CompilationException> getExceptions() {
		return exceptions;
	}

	public void syntax_error(Symbol symbol) {
		exceptions.add(new CompilationException(symbol, CompilationException.Scope.SyntacticalAnalyzer));
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$YogurParser$actions {
  private final YogurParser parser;

  /** Constructor */
  CUP$YogurParser$actions(YogurParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$YogurParser$do_action_part00000000(
    int                        CUP$YogurParser$act_num,
    java_cup.runtime.lr_parser CUP$YogurParser$parser,
    java.util.Stack            CUP$YogurParser$stack,
    int                        CUP$YogurParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$YogurParser$result;

      /* select the action based on the action number */
      switch (CUP$YogurParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S DELIMITER Inst 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program(p, i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		RESULT = start_val;
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$YogurParser$parser.done_parsing();
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S DELIMITER Dec 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		FunctionOrVarDeclaration d = (FunctionOrVarDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program(p, d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= S DELIMITER DClass 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		ClassDeclaration d = (ClassDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program(p, d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= S DELIMITER 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = p; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= Inst 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program(i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= Dec 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		FunctionOrVarDeclaration d = (FunctionOrVarDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program(d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= DClass 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		ClassDeclaration d = (ClassDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program(d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= 
            {
              Program RESULT =null;
		 RESULT = new Program(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= If 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		IfStructure i = (IfStructure)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= While 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		WhileStructure i = (WhileStructure)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= For 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		ForStructure i = (ForStructure)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= Ass 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Assignment i = (Assignment)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= Exp 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inst ::= Block 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Block i = (Block)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Inst ::= DVar 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		VarDeclaration i = (VarDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Dec ::= DProc 
            {
              FunctionOrVarDeclaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		FuncDeclaration d = (FuncDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Dec",2, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Dec ::= DFunc 
            {
              FunctionOrVarDeclaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		FuncDeclaration d = (FuncDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Dec",2, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DVar ::= VAR Arg 
            {
              VarDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new VarDeclaration(a); RESULT.setLineCol(aleft, aright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DVar",3, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DVar ::= VAR Arg ASSIGN Exp 
            {
              VarDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new VarDeclaration(a, e); RESULT.setLineCol(aleft, aright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DVar",3, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DVarN ::= VAR Arg 
            {
              VarDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Argument a = (Argument)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new VarDeclaration(a); RESULT.setLineCol(aleft, aright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DVarN",4, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DProc ::= DEF ID LPAREN ArgList RPAREN Block 
            {
              FuncDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		ArrayList<Argument> args = (ArrayList<Argument>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new FuncDeclaration(id, args, b); RESULT.setLineCol(idleft, idright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DProc",5, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DFunc ::= DEF ID LPAREN ArgList RPAREN ARROW Arg Block 
            {
              FuncDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).right;
		ArrayList<Argument> args = (ArrayList<Argument>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).value;
		int rargleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int rargright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Argument rarg = (Argument)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new FuncDeclaration(id, args, rarg, b); RESULT.setLineCol(idleft, idright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DFunc",6, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-7)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DClass ::= CLASS TYPE LBRACKET ClassBody RBRACKET 
            {
              ClassDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		List<FunctionOrVarDeclaration> insts = (List<FunctionOrVarDeclaration>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ClassDeclaration(t, insts); RESULT.setLineCol(tleft, tright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DClass",7, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Block ::= LBRACKET BlockBody RBRACKET 
            {
              Block RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		List<Statement> insts = (List<Statement>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new Block(insts); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Block",8, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // If ::= IF Exp Block Else 
            {
              IfStructure RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Block elsee = (Block)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new IfStructure(exp, b, elsee); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("If",9, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Else ::= ELSE If 
            {
              Block RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		IfStructure ife = (IfStructure)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 List<Statement> insts = new ArrayList<>(); insts.add(ife); RESULT = new Block(insts); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",36, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Else ::= ELSE Block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",36, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Else ::= 
            {
              Block RESULT =null;
		 RESULT = null; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",36, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // While ::= WHILE Exp Block 
            {
              WhileStructure RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new WhileStructure(e, b); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("While",10, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // For ::= FOR ID IN Exp TO Exp Block 
            {
              ForStructure RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Expression start = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Expression end = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ForStructure(new BaseIdentifier(id), start, end, b); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("For",11, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ass ::= Exp ASSIGN Exp 
            {
              Assignment RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Assignment(e1, e2); RESULT.setLineCol(eqleft, eqright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Ass",12, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Exp Op Exp0 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		BinaryOperation.Operator o = (BinaryOperation.Operator)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= Exp0 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp0 ::= Exp0 Op0 Exp1 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		BinaryOperation.Operator o = (BinaryOperation.Operator)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp0",14, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp0 ::= Exp1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp0",14, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp1 ::= Exp1 Op1 Exp2 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		BinaryOperation.Operator o = (BinaryOperation.Operator)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp1",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp1 ::= Exp2 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp1",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp2 ::= Exp2 Op2 Exp3 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		BinaryOperation.Operator o = (BinaryOperation.Operator)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",16, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp2 ::= Exp3 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",16, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp3 ::= Exp3 Op3 Exp4 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		BinaryOperation.Operator o = (BinaryOperation.Operator)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp3",17, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp3 ::= Exp4 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp3",17, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp4 ::= Exp4 Op4 Exp5 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		BinaryOperation.Operator o = (BinaryOperation.Operator)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation(e1, e2, o); RESULT.setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp4",18, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp4 ::= Exp5 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp4",18, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp5 ::= Op5 Exp5 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		UnaryOperation.Operator o = (UnaryOperation.Operator)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new UnaryOperation(e, o); RESULT.setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp5",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp5 ::= Exp6 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp5",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp6 ::= Exp6 DOT ID 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new DotIdentifier(e, id); RESULT.setLineCol(dleft, dright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp6 ::= Exp6 LSQUARE Exp RSQUARE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIdentifier(e, i); RESULT.setLineCol(ileft, iright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp6 ::= Exp6 LPAREN CommaExp RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new FunctionCall(e, exps); RESULT.setLineCol(lleft, lright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp6 ::= Exp6 LPAREN RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new FunctionCall(e, new ArrayList<>()); RESULT.setLineCol(lleft, lright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp6 ::= Exp7 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp7 ::= LPAREN Exp RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp7 ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BaseIdentifier(id); RESULT.setLineCol(idleft, idright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp7 ::= INT 
            {
              Expression RESULT =null;
		int intLitleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int intLitright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Integer intLit = (Integer)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Constant(intLit); RESULT.setLineCol(intLitleft, intLitright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp7 ::= BOOL 
            {
              Expression RESULT =null;
		int boolLitleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int boolLitright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Boolean boolLit = (Boolean)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Constant(boolLit); RESULT.setLineCol(boolLitleft, boolLitright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Op ::= OR 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.OR; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op",22, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Op0 ::= AND 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.AND; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op0",23, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Op1 ::= EQ 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.EQ; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op1",24, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Op1 ::= NEQ 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.NEQ; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op1",24, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Op2 ::= LT 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.LT; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op2",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Op2 ::= LEQ 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.LEQ; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op2",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Op2 ::= GT 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.GT; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op2",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Op2 ::= GEQ 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.GEQ; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op2",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Op3 ::= SUM 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.SUM; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op3",26, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Op3 ::= SUBS 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.SUBS; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op3",26, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Op4 ::= PROD 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.PROD; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op4",27, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Op4 ::= DIV 
            {
              BinaryOperation.Operator RESULT =null;
		 RESULT = BinaryOperation.Operator.DIV; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op4",27, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Op5 ::= SUBS 
            {
              UnaryOperation.Operator RESULT =null;
		 RESULT = UnaryOperation.Operator.NEG; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op5",28, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Op5 ::= NOT 
            {
              UnaryOperation.Operator RESULT =null;
		 RESULT = UnaryOperation.Operator.NOT; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op5",28, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VarType ::= VarType LSQUARE INT RSQUARE 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayType(t, i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("VarType",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VarType ::= TYPE 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = Type.fromName(t); RESULT.setLineCol(tleft, tright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("VarType",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CommaExp ::= CommaExp COMMA Exp 
            {
              List<Expression> RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		List<Expression> exps = (List<Expression>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 exps.add(e); RESULT = exps; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("CommaExp",30, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CommaExp ::= Exp 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(e); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("CommaExp",30, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ArgList ::= Args 
            {
              ArrayList<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		ArrayList<Argument> args = (ArrayList<Argument>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = args; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ArgList",31, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ArgList ::= 
            {
              ArrayList<Argument> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ArgList",31, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Args ::= Args COMMA Arg 
            {
              ArrayList<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		ArrayList<Argument> args = (ArrayList<Argument>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 args.add(arg); RESULT = args; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Args",32, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Args ::= Arg 
            {
              ArrayList<Argument> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Argument arg = (Argument)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(arg); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Args",32, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Arg ::= ID COLON VarType 
            {
              Argument RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Argument(id, t); RESULT.setLineCol(cleft, cright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Arg",33, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ClassBody ::= ClassBody DELIMITER Dec 
            {
              List<FunctionOrVarDeclaration> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		List<FunctionOrVarDeclaration> b = (List<FunctionOrVarDeclaration>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		FunctionOrVarDeclaration d = (FunctionOrVarDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 b.add(d); RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",34, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ClassBody ::= ClassBody DELIMITER DVarN 
            {
              List<FunctionOrVarDeclaration> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		List<FunctionOrVarDeclaration> b = (List<FunctionOrVarDeclaration>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		VarDeclaration d = (VarDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 b.add(d); RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",34, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ClassBody ::= ClassBody DELIMITER 
            {
              List<FunctionOrVarDeclaration> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		List<FunctionOrVarDeclaration> b = (List<FunctionOrVarDeclaration>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",34, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ClassBody ::= Dec 
            {
              List<FunctionOrVarDeclaration> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		FunctionOrVarDeclaration d = (FunctionOrVarDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",34, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ClassBody ::= DVarN 
            {
              List<FunctionOrVarDeclaration> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		VarDeclaration d = (VarDeclaration)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",34, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ClassBody ::= 
            {
              List<FunctionOrVarDeclaration> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",34, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BlockBody ::= BlockBody DELIMITER Inst 
            {
              List<Statement> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		List<Statement> is = (List<Statement>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 is.add(i); RESULT = is; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",35, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BlockBody ::= BlockBody DELIMITER 
            {
              List<Statement> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		List<Statement> is = (List<Statement>)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = is; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",35, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BlockBody ::= Inst 
            {
              List<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Statement i = (Statement)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",35, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BlockBody ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",35, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$YogurParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$YogurParser$do_action(
    int                        CUP$YogurParser$act_num,
    java_cup.runtime.lr_parser CUP$YogurParser$parser,
    java.util.Stack            CUP$YogurParser$stack,
    int                        CUP$YogurParser$top)
    throws java.lang.Exception
    {
              return CUP$YogurParser$do_action_part00000000(
                               CUP$YogurParser$act_num,
                               CUP$YogurParser$parser,
                               CUP$YogurParser$stack,
                               CUP$YogurParser$top);
    }
}

}
