
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package yogur.cup;

import java_cup.runtime.*;
import java.util.*;
import yogur.error.CompilationException;
import yogur.tree.*;
import yogur.tree.declaration.*;
import yogur.tree.declaration.declarator.*;
import yogur.tree.expression.*;
import yogur.tree.expression.identifier.*;
import yogur.tree.statement.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class YogurParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public YogurParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public YogurParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public YogurParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\002\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\004\000\002\005\006" +
    "\000\002\006\010\000\002\007\012\000\002\010\007\000" +
    "\002\011\005\000\002\012\006\000\002\041\004\000\002" +
    "\041\004\000\002\041\002\000\002\013\005\000\002\014" +
    "\011\000\002\015\005\000\002\027\005\000\002\027\004" +
    "\000\002\027\003\000\002\030\005\000\002\030\003\000" +
    "\002\016\005\000\002\016\003\000\002\017\005\000\002" +
    "\017\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\024" +
    "\004\000\002\024\004\000\002\024\003\000\002\025\005" +
    "\000\002\025\004\000\002\025\006\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\031\006\000\002\031" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\007\000\002\033\005\000\002\033\003\000" +
    "\002\034\003\000\002\034\002\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\003\000\002\037\003\000\002\040\005" +
    "\000\002\040\003\000\002\040\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\030\002\ufff9\006\014\010\ufff9\036\013\042" +
    "\012\044\020\045\031\046\005\047\011\051\006\052\027" +
    "\001\002\000\010\002\ufff6\010\ufff6\043\ufff6\001\002\000" +
    "\004\007\220\001\002\000\016\004\041\005\042\006\045" +
    "\014\043\022\051\036\054\001\002\000\006\002\212\010" +
    "\211\001\002\000\010\002\ufff3\010\ufff3\043\ufff3\001\002" +
    "\000\016\004\041\005\042\006\045\014\043\022\051\036" +
    "\054\001\002\000\024\006\014\010\uffac\036\013\042\012" +
    "\043\uffac\045\031\047\011\051\006\052\027\001\002\000" +
    "\006\006\014\036\013\001\002\000\014\012\uffdf\023\uffdf" +
    "\024\uffdf\037\uffdf\040\uffdf\001\002\000\006\002\ufffc\010" +
    "\ufffc\001\002\000\010\002\ufff1\010\ufff1\043\ufff1\001\002" +
    "\000\006\002\ufffa\010\ufffa\001\002\000\004\006\160\001" +
    "\002\000\010\002\ufff2\010\ufff2\043\ufff2\001\002\000\010" +
    "\002\ufff4\010\ufff4\043\ufff4\001\002\000\010\002\ufff5\010" +
    "\ufff5\043\ufff5\001\002\000\010\002\ufff8\010\ufff8\043\ufff8" +
    "\001\002\000\014\012\uffe1\023\uffe1\024\uffe1\037\uffe1\040" +
    "\uffe1\001\002\000\010\002\ufff7\010\ufff7\043\ufff7\001\002" +
    "\000\004\006\152\001\002\000\006\002\ufffb\010\ufffb\001" +
    "\002\000\004\006\140\001\002\000\012\012\037\023\036" +
    "\024\034\040\033\001\002\000\016\004\041\005\042\006" +
    "\045\014\043\022\051\036\054\001\002\000\016\004\041" +
    "\005\042\006\045\014\043\022\051\036\054\001\002\000" +
    "\014\012\uffe2\023\uffe2\024\uffe2\037\uffe2\040\uffe2\001\002" +
    "\000\004\006\127\001\002\000\016\004\041\005\042\006" +
    "\045\014\043\022\051\036\054\001\002\000\032\002\uffdd" +
    "\010\uffdd\011\uffdd\020\111\021\uffdd\025\uffdd\034\uffdd\037" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\054\uffdd\001\002\000\070" +
    "\002\uffc1\010\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\054\uffc1\001\002\000\070\002\uffc0\010\uffc0\011\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000\016\004" +
    "\041\005\042\006\045\014\043\022\051\036\054\001\002" +
    "\000\012\002\uffe4\010\uffe4\021\107\043\uffe4\001\002\000" +
    "\070\002\uffc2\010\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\054\uffc2\001\002\000\070\002\uffc4\010\uffc4\011\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\054\uffc4\001\002\000\070" +
    "\002\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\023\116\024\034\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\036\114\037\uffc9\040\033\041\uffc9\042\uffc9\043\uffc9" +
    "\054\uffc9\001\002\000\060\002\uffcc\010\uffcc\011\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\037\uffcc\041\uffcc\042\uffcc\043\uffcc\054\uffcc" +
    "\001\002\000\016\004\041\005\042\006\045\014\043\022" +
    "\051\036\054\001\002\000\060\002\uffd0\010\uffd0\011\uffd0" +
    "\013\uffd0\014\uffd0\015\073\016\074\017\072\020\uffd0\021" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\037\uffd0\041\uffd0\042\uffd0\043\uffd0\054" +
    "\uffd0\001\002\000\052\002\uffd3\010\uffd3\011\uffd3\013\067" +
    "\014\070\020\uffd3\021\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\037\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\054\uffd3\001\002\000\016\004\041\005" +
    "\042\006\045\014\043\022\051\036\054\001\002\000\046" +
    "\002\uffd8\010\uffd8\011\uffd8\020\uffd8\021\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\064\031\063\032\065\033\062\034\uffd8" +
    "\037\uffd8\041\uffd8\042\uffd8\043\uffd8\054\uffd8\001\002\000" +
    "\036\002\uffdb\010\uffdb\011\uffdb\020\uffdb\021\uffdb\025\uffdb" +
    "\026\057\027\060\034\uffdb\037\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\054\uffdb\001\002\000\016\004\041\005\042\006\045" +
    "\014\043\022\051\036\054\001\002\000\016\004\041\005" +
    "\042\006\045\014\043\022\051\036\054\001\002\000\046" +
    "\002\uffd9\010\uffd9\011\uffd9\020\uffd9\021\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\064\031\063\032\065\033\062\034\uffd9" +
    "\037\uffd9\041\uffd9\042\uffd9\043\uffd9\054\uffd9\001\002\000" +
    "\016\004\041\005\042\006\045\014\043\022\051\036\054" +
    "\001\002\000\016\004\041\005\042\006\045\014\043\022" +
    "\051\036\054\001\002\000\016\004\041\005\042\006\045" +
    "\014\043\022\051\036\054\001\002\000\016\004\041\005" +
    "\042\006\045\014\043\022\051\036\054\001\002\000\052" +
    "\002\uffd6\010\uffd6\011\uffd6\013\067\014\070\020\uffd6\021" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\054" +
    "\uffd6\001\002\000\016\004\041\005\042\006\045\014\043" +
    "\022\051\036\054\001\002\000\016\004\041\005\042\006" +
    "\045\014\043\022\051\036\054\001\002\000\060\002\uffd1" +
    "\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\073\016\074\017" +
    "\072\020\uffd1\021\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\037\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\054\uffd1\001\002\000\016\004\041\005\042" +
    "\006\045\014\043\022\051\036\054\001\002\000\016\004" +
    "\041\005\042\006\045\014\043\022\051\036\054\001\002" +
    "\000\016\004\041\005\042\006\045\014\043\022\051\036" +
    "\054\001\002\000\060\002\uffce\010\uffce\011\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\037\uffce\041\uffce\042\uffce\043\uffce\054\uffce\001" +
    "\002\000\060\002\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\037\uffcf\041\uffcf\042\uffcf\043\uffcf\054\uffcf\001\002\000" +
    "\060\002\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\037\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\054\uffcd\001\002\000\060\002" +
    "\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015\073\016\074" +
    "\017\072\020\uffd2\021\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\054\uffd2\001\002\000\052\002\uffd4\010" +
    "\uffd4\011\uffd4\013\067\014\070\020\uffd4\021\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4\054\uffd4\001\002" +
    "\000\052\002\uffd5\010\uffd5\011\uffd5\013\067\014\070\020" +
    "\uffd5\021\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\037\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\054\uffd5\001\002\000\052\002\uffd7\010\uffd7\011\uffd7" +
    "\013\067\014\070\020\uffd7\021\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\037\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\054\uffd7\001\002\000\046\002" +
    "\uffda\010\uffda\011\uffda\020\uffda\021\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\064\031\063\032\065\033\062\034\uffda\037" +
    "\uffda\041\uffda\042\uffda\043\uffda\054\uffda\001\002\000\006" +
    "\021\107\037\106\001\002\000\070\002\uffc3\010\uffc3\011" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\054\uffc3\001\002\000" +
    "\016\004\041\005\042\006\045\014\043\022\051\036\054" +
    "\001\002\000\032\002\uffde\010\uffde\011\uffde\020\111\021" +
    "\uffde\025\uffde\034\uffde\037\uffde\041\uffde\042\uffde\043\uffde" +
    "\054\uffde\001\002\000\016\004\041\005\042\006\045\014" +
    "\043\022\051\036\054\001\002\000\036\002\uffdc\010\uffdc" +
    "\011\uffdc\020\uffdc\021\uffdc\025\uffdc\026\057\027\060\034" +
    "\uffdc\037\uffdc\041\uffdc\042\uffdc\043\uffdc\054\uffdc\001\002" +
    "\000\060\002\uffca\010\uffca\011\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\037" +
    "\uffca\041\uffca\042\uffca\043\uffca\054\uffca\001\002\000\020" +
    "\004\041\005\042\006\045\014\043\022\051\036\054\037" +
    "\122\001\002\000\070\002\uffc7\010\uffc7\011\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\054\uffc7\001\002\000\004\006\117" +
    "\001\002\000\070\002\uffc8\010\uffc8\011\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\054\uffc8\001\002\000\006\011\123\037" +
    "\124\001\002\000\010\011\uffb8\021\107\037\uffb8\001\002" +
    "\000\070\002\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\054\uffc5\001\002\000\016\004\041\005\042\006" +
    "\045\014\043\022\051\036\054\001\002\000\070\002\uffc6" +
    "\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\054\uffc6" +
    "\001\002\000\010\011\uffb9\021\107\037\uffb9\001\002\000" +
    "\060\002\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\037\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\054\uffcb\001\002\000\014\012" +
    "\uffe3\023\uffe3\024\uffe3\037\uffe3\040\uffe3\001\002\000\006" +
    "\021\107\041\131\001\002\000\072\002\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\054\uffbb\001" +
    "\002\000\012\021\107\025\135\034\133\041\134\001\002" +
    "\000\016\004\041\005\042\006\045\014\043\022\051\036" +
    "\054\001\002\000\072\002\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\054\uffbd\001\002\000\072" +
    "\002\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\054\uffbc\001\002\000\006\021\107\041\137\001" +
    "\002\000\072\002\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\054\uffba\001\002\000\004\034\144" +
    "\001\002\000\012\002\ufff0\010\ufff0\012\142\043\ufff0\001" +
    "\002\000\016\004\041\005\042\006\045\014\043\022\051" +
    "\036\054\001\002\000\012\002\uffef\010\uffef\021\107\043" +
    "\uffef\001\002\000\004\007\146\001\002\000\022\002\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\037\uffb3\040\147\042\uffb3\043" +
    "\uffb3\001\002\000\022\002\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\037\uffbe\040\uffbe\042\uffbe\043\uffbe\001\002\000\004\004" +
    "\150\001\002\000\004\041\151\001\002\000\022\002\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\037\uffbf\040\uffbf\042\uffbf\043" +
    "\uffbf\001\002\000\004\053\153\001\002\000\016\004\041" +
    "\005\042\006\045\014\043\022\051\036\054\001\002\000" +
    "\006\021\107\054\155\001\002\000\016\004\041\005\042" +
    "\006\045\014\043\022\051\036\054\001\002\000\006\021" +
    "\107\042\012\001\002\000\010\002\uffe5\010\uffe5\043\uffe5" +
    "\001\002\000\004\036\161\001\002\000\006\006\140\037" +
    "\uffb6\001\002\000\006\011\172\037\uffb7\001\002\000\004" +
    "\037\165\001\002\000\006\011\uffb4\037\uffb4\001\002\000" +
    "\006\035\167\042\012\001\002\000\010\002\uffee\010\uffee" +
    "\043\uffee\001\002\000\004\006\140\001\002\000\004\042" +
    "\012\001\002\000\010\002\uffed\010\uffed\043\uffed\001\002" +
    "\000\004\006\140\001\002\000\006\011\uffb5\037\uffb5\001" +
    "\002\000\012\023\036\024\034\037\175\040\033\001\002" +
    "\000\014\012\uffe0\023\uffe0\024\uffe0\037\uffe0\040\uffe0\001" +
    "\002\000\006\010\200\043\201\001\002\000\006\010\uffad" +
    "\043\uffad\001\002\000\020\006\014\036\013\042\012\045" +
    "\031\047\011\051\006\052\027\001\002\000\012\002\uffeb" +
    "\010\uffeb\043\uffeb\050\uffeb\001\002\000\006\010\uffae\043" +
    "\uffae\001\002\000\006\021\107\042\012\001\002\000\012" +
    "\002\uffe7\010\uffe7\043\uffe7\050\205\001\002\000\006\042" +
    "\012\047\011\001\002\000\010\002\uffea\010\uffea\043\uffea" +
    "\001\002\000\010\002\uffe8\010\uffe8\043\uffe8\001\002\000" +
    "\010\002\uffe9\010\uffe9\043\uffe9\001\002\000\030\002\ufffd" +
    "\006\014\010\ufffd\036\013\042\012\044\020\045\031\046" +
    "\005\047\011\051\006\052\027\001\002\000\004\002\000" +
    "\001\002\000\006\002\001\010\001\001\002\000\006\002" +
    "\ufffe\010\ufffe\001\002\000\006\002\uffff\010\uffff\001\002" +
    "\000\006\021\107\042\012\001\002\000\010\002\uffe6\010" +
    "\uffe6\043\uffe6\001\002\000\004\042\221\001\002\000\006" +
    "\044\020\045\031\001\002\000\006\010\225\043\226\001" +
    "\002\000\006\010\uffaf\043\uffaf\001\002\000\006\010\uffb0" +
    "\043\uffb0\001\002\000\006\044\020\045\031\001\002\000" +
    "\006\002\uffec\010\uffec\001\002\000\006\010\uffb1\043\uffb1" +
    "\001\002\000\006\010\uffb2\043\uffb2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\036\002\006\003\014\004\027\005\007\006" +
    "\020\007\015\010\016\011\021\012\023\013\025\014\003" +
    "\015\022\027\031\030\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\016\215\017\037\020\055\021\054" +
    "\022\052\023\051\024\047\025\046\026\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\202\017\037" +
    "\020\055\021\054\022\052\023\051\024\047\025\046\026" +
    "\045\001\001\000\026\003\176\005\007\011\021\012\023" +
    "\013\025\014\003\015\022\027\031\030\024\040\175\001" +
    "\001\000\006\027\173\030\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\140" +
    "\001\001\000\004\032\034\001\001\000\024\016\131\017" +
    "\037\020\055\021\054\022\052\023\051\024\047\025\046" +
    "\026\045\001\001\000\024\016\127\017\037\020\055\021" +
    "\054\022\052\023\051\024\047\025\046\026\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\043\017" +
    "\037\020\055\021\054\022\052\023\051\024\047\025\046" +
    "\026\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\125\025\046\026\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\114\001\001\000\002\001\001\000\010\024\112" +
    "\025\046\026\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\016\104\017\037\020\055\021\054\022\052" +
    "\023\051\024\047\025\046\026\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\103\022\052\023\051" +
    "\024\047\025\046\026\045\001\001\000\016\021\060\022" +
    "\052\023\051\024\047\025\046\026\045\001\001\000\002" +
    "\001\001\000\014\022\102\023\051\024\047\025\046\026" +
    "\045\001\001\000\014\022\101\023\051\024\047\025\046" +
    "\026\045\001\001\000\014\022\100\023\051\024\047\025" +
    "\046\026\045\001\001\000\014\022\065\023\051\024\047" +
    "\025\046\026\045\001\001\000\002\001\001\000\012\023" +
    "\077\024\047\025\046\026\045\001\001\000\012\023\070" +
    "\024\047\025\046\026\045\001\001\000\002\001\001\000" +
    "\010\024\076\025\046\026\045\001\001\000\010\024\075" +
    "\025\046\026\045\001\001\000\010\024\074\025\046\026" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\107\020\055\021\054\022" +
    "\052\023\051\024\047\025\046\026\045\001\001\000\002" +
    "\001\001\000\020\020\111\021\054\022\052\023\051\024" +
    "\047\025\046\026\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\016\120\017\037\020\055\021\054\022" +
    "\052\023\051\024\047\025\046\026\045\033\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\016\124\017\037\020\055\021\054\022\052\023\051\024" +
    "\047\025\046\026\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\135" +
    "\017\037\020\055\021\054\022\052\023\051\024\047\025" +
    "\046\026\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\016\142\017\037\020\055\021\054" +
    "\022\052\023\051\024\047\025\046\026\045\001\001\000" +
    "\002\001\001\000\004\031\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\153\017\037" +
    "\020\055\021\054\022\052\023\051\024\047\025\046\026" +
    "\045\001\001\000\002\001\001\000\024\016\155\017\037" +
    "\020\055\021\054\022\052\023\051\024\047\025\046\026" +
    "\045\001\001\000\004\011\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\162\035\161\036\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\165\001\001\000\002\001\001\000\004\036" +
    "\167\001\001\000\004\011\170\001\001\000\002\001\001" +
    "\000\004\036\172\001\001\000\002\001\001\000\004\032" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\201\005\007\011\021\012\023\013" +
    "\025\014\003\015\022\027\031\030\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\203\001\001\000" +
    "\004\041\205\001\001\000\006\011\206\012\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\212\004\214\005\007\006\020\007\015\010\213" +
    "\011\021\012\023\013\025\014\003\015\022\027\031\030" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\223\005\222" +
    "\006\020\007\015\037\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\227\005\226" +
    "\006\020\007\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$YogurParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$YogurParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$YogurParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private List<CompilationException> exceptions = new ArrayList<>();

	public List<CompilationException> getExceptions() {
		return exceptions;
	}

	public void syntax_error(Symbol symbol) {
		exceptions.add(new CompilationException(symbol, CompilationException.Scope.SyntacticalAnalyzer));
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$YogurParser$actions {
  private final YogurParser parser;

  /** Constructor */
  CUP$YogurParser$actions(YogurParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$YogurParser$do_action_part00000000(
    int                        CUP$YogurParser$act_num,
    java_cup.runtime.lr_parser CUP$YogurParser$parser,
    java.util.Stack            CUP$YogurParser$stack,
    int                        CUP$YogurParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$YogurParser$result;

      /* select the action based on the action number */
      switch (CUP$YogurParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S DELIMITER Inst 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((Program)p, (StatementOrDeclaration)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		RESULT = start_val;
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$YogurParser$parser.done_parsing();
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S DELIMITER Dec 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((Program)p, (StatementOrDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= S DELIMITER DClass 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((Program)p, (StatementOrDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= S DELIMITER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = p; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= Inst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((StatementOrDeclaration)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= Dec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((StatementOrDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= DClass 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((StatementOrDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= 
            {
              Object RESULT =null;
		 RESULT = new Program(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= If 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= While 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= For 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= Ass 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= Block 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inst ::= DVar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Dec ::= DProc 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Dec",2, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Dec ::= DFunc 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Dec",2, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DVar ::= VAR Arg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new VarDeclaration((Argument)a); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DVar",3, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DVar ::= VAR Arg ASSIGN Exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new VarDeclaration((Argument)a, (Expression)e); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DVar",3, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DProc ::= DEF ID LPAREN ArgList RPAREN Block 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new FuncDeclaration((String)id, (List<Argument>)args, (Block)b); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DProc",4, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DFunc ::= DEF ID LPAREN ArgList RPAREN ARROW Arg Block 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).value;
		int rargleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int rargright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object rarg = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new FuncDeclaration((String)id, (List<Argument>)args, (Argument)rarg, (Block)b); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DFunc",5, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-7)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DClass ::= CLASS TYPE LBRACKET ClassBody RBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ClassDeclaration(new BaseType((String)t), (List<FunctionOrVarDeclaration>)insts); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DClass",6, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Block ::= LBRACKET BlockBody RBRACKET 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new Block((List<Statement>)insts); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Block",7, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // If ::= IF Exp Block Else 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object elsee = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new IfStructure((Expression)exp, (Block)b, (Block)elsee); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("If",8, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Else ::= ELSE If 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 List<Statement> insts = new ArrayList<Statement>(); insts.add((IfStructure)ife); RESULT = new Block(insts); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",31, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Else ::= ELSE Block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",31, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Else ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",31, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // While ::= WHILE Exp Block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new WhileStructure((Expression)e, (Block)b); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("While",9, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // For ::= FOR ID IN Exp TO Exp Block 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ForStructure(new BaseDeclarator((String)id), (Expression)start, (Expression)end, (Block)b); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("For",10, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Ass ::= Declarator ASSIGN Exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Assignation((Declarator)d, (Expression)e); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Ass",11, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Declarator ::= Declarator DOT ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new DotDeclarator((Declarator)d, (String)id); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declarator ::= Declarator Index 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayDeclarator((Declarator)d, (ArrayIndex)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declarator ::= Declarator0 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declarator0 ::= LPAREN Declarator RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator0",22, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Declarator0 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BaseDeclarator((String)id); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator0",22, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp OR Exp0 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.OR); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp",12, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp0 ::= Exp0 AND Exp1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.AND); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp0",13, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp0 ::= Exp1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp0",13, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp1 ::= Exp1 EQ Exp2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.EQ); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp1",14, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp1 ::= Exp1 NEQ Exp2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.NEQ); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp1",14, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp1 ::= Exp2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp1",14, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp2 ::= Exp2 LT Exp3 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.LT); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp2 ::= Exp2 LEQ Exp3 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.LEQ); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp2 ::= Exp2 GT Exp3 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.GT); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp2 ::= Exp2 GEQ Exp3 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.GEQ); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp2 ::= Exp3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp3 ::= Exp3 SUM Exp4 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.SUM); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp3",16, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp3 ::= Exp3 SUBS Exp4 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.SUBS); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp3",16, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp3 ::= Exp4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp3",16, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp4 ::= Exp4 PROD Exp5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.PROD); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp4",17, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp4 ::= Exp4 DIV Exp5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.DIV); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp4",17, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp4 ::= Exp4 MOD Exp5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, BinaryOperation.Operator.MOD); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp4",17, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp4 ::= Exp5 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp4",17, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp5 ::= SUBS Exp5 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new UnaryOperation((Expression)e, UnaryOperation.Operator.NEG); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp5",18, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp5 ::= NOT Exp5 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new UnaryOperation((Expression)e, UnaryOperation.Operator.NOT); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp5",18, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp5 ::= Exp6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp5",18, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp6 ::= Exp6 DOT ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new DotIdentifier((Expression)e, (String)id); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp6 ::= Exp6 Index 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayIdentifier((Expression)e, (ArrayIndex)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Exp6 ::= Exp6 LPAREN CommaExp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new FunctionCall((Expression)e, (List<Expression>)exps); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exp6 ::= Exp6 LPAREN RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		 RESULT = new FunctionCall((Expression)e, new ArrayList<Expression>()); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp6 ::= Exp7 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp7 ::= LPAREN Exp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp7 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BaseIdentifier((String)id); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp7 ::= INT 
            {
              Object RESULT =null;
		int intLitleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int intLitright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object intLit = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Constant(intLit); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp7 ::= BOOL 
            {
              Object RESULT =null;
		int boolLitleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int boolLitright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object boolLit = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Constant(boolLit); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VarType ::= VarType LSQUARE INT RSQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayType((Type)t, (Integer)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("VarType",23, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VarType ::= TYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BaseType((String)t); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("VarType",23, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Index ::= LSQUARE Exp RSQUARE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIndex((Expression)e, ArrayIndex.AccessType.INDEX); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Index",24, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Index ::= LSQUARE Exp RRANGE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIndex((Expression)e, ArrayIndex.AccessType.LEFT_RANGE); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Index",24, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Index ::= LRANGE Exp RSQUARE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIndex((Expression)e, ArrayIndex.AccessType.RIGHT_RANGE); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Index",24, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Index ::= LSQUARE Exp COLON Exp RSQUARE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIndex((Expression)e1, (Expression)e2, ArrayIndex.AccessType.LEFT_RIGHT_RANGE); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Index",24, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CommaExp ::= CommaExp COMMA Exp 
            {
              Object RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<Expression>)exps).add((Expression)e); RESULT = exps; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("CommaExp",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CommaExp ::= Exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); ((List<Expression>)RESULT).add((Expression)e); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("CommaExp",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ArgList ::= Args 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = args; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ArgList",26, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ArgList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Argument>(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ArgList",26, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Args ::= Args COMMA Arg 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<Argument>)args).add((Argument)arg); RESULT = args; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Args",27, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Args ::= Arg 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<Argument>(); ((List<Argument>)RESULT).add((Argument)arg); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Args",27, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Arg ::= ID COLON VarType 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Argument((String)id, (Type)t); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Arg",28, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ClassBody ::= ClassBody DELIMITER Dec 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<FunctionOrVarDeclaration>)b).add((FuncDeclaration)d); RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ClassBody ::= ClassBody DELIMITER DVar 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<FunctionOrVarDeclaration>)b).add((VarDeclaration)d); RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ClassBody ::= Dec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<FunctionOrVarDeclaration>(); ((List<FunctionOrVarDeclaration>)RESULT).add((FuncDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ClassBody ::= DVar 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<FunctionOrVarDeclaration>(); ((List<FunctionOrVarDeclaration>)RESULT).add((VarDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BlockBody ::= BlockBody DELIMITER Inst 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<Statement>)is).add((Statement)i); RESULT = is; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",30, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BlockBody ::= Inst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); ((List<Statement>)RESULT).add((Statement)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",30, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BlockBody ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",30, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$YogurParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$YogurParser$do_action(
    int                        CUP$YogurParser$act_num,
    java_cup.runtime.lr_parser CUP$YogurParser$parser,
    java.util.Stack            CUP$YogurParser$stack,
    int                        CUP$YogurParser$top)
    throws java.lang.Exception
    {
              return CUP$YogurParser$do_action_part00000000(
                               CUP$YogurParser$act_num,
                               CUP$YogurParser$parser,
                               CUP$YogurParser$stack,
                               CUP$YogurParser$top);
    }
}

}
