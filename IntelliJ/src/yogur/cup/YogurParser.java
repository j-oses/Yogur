
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package yogur.cup;

import java_cup.runtime.*;
import java.util.*;
import yogur.utils.CompilationException;
import yogur.tree.*;
import yogur.tree.declaration.*;
import yogur.tree.declaration.declarator.*;
import yogur.tree.expression.*;
import yogur.tree.expression.identifier.*;
import yogur.tree.statement.*;
import yogur.tree.type.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class YogurParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public YogurParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public YogurParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public YogurParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\002\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\004\000\002\005\006" +
    "\000\002\006\004\000\002\007\010\000\002\010\012\000" +
    "\002\011\007\000\002\012\005\000\002\013\006\000\002" +
    "\051\004\000\002\051\004\000\002\051\002\000\002\014" +
    "\005\000\002\015\011\000\002\016\005\000\002\037\005" +
    "\000\002\037\004\000\002\037\003\000\002\040\005\000" +
    "\002\040\003\000\002\017\005\000\002\017\003\000\002" +
    "\020\005\000\002\020\003\000\002\021\005\000\002\021" +
    "\003\000\002\022\005\000\002\022\003\000\002\023\005" +
    "\000\002\023\003\000\002\024\005\000\002\024\003\000" +
    "\002\025\004\000\002\025\003\000\002\026\005\000\002" +
    "\026\004\000\002\026\006\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\041\006\000\002\041\003\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\007\000\002\043" +
    "\005\000\002\043\003\000\002\044\003\000\002\044\002" +
    "\000\002\045\005\000\002\045\003\000\002\046\005\000" +
    "\002\047\005\000\002\047\005\000\002\047\003\000\002" +
    "\047\003\000\002\050\005\000\002\050\003\000\002\050" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\030\002\ufff9\006\015\010\ufff9\036\012\042" +
    "\013\044\020\045\031\046\005\047\011\051\006\052\025" +
    "\001\002\000\010\002\ufff6\010\ufff6\043\ufff6\001\002\000" +
    "\004\007\217\001\002\000\016\004\042\005\043\006\046" +
    "\014\044\022\052\036\056\001\002\000\006\002\211\010" +
    "\210\001\002\000\010\002\ufff3\010\ufff3\043\ufff3\001\002" +
    "\000\016\004\042\005\043\006\046\014\044\022\052\036" +
    "\056\001\002\000\006\006\015\036\012\001\002\000\024" +
    "\006\015\010\uffa4\036\012\042\013\043\uffa4\045\031\047" +
    "\011\051\006\052\025\001\002\000\006\002\ufffc\010\ufffc" +
    "\001\002\000\014\012\uffde\023\uffde\024\uffde\037\uffde\040" +
    "\uffde\001\002\000\010\002\ufff1\010\ufff1\043\ufff1\001\002" +
    "\000\006\002\ufffa\010\ufffa\001\002\000\004\006\157\001" +
    "\002\000\010\002\ufff2\010\ufff2\043\ufff2\001\002\000\010" +
    "\002\ufff4\010\ufff4\043\ufff4\001\002\000\010\002\ufff5\010" +
    "\ufff5\043\ufff5\001\002\000\010\002\ufff8\010\ufff8\043\ufff8" +
    "\001\002\000\004\006\151\001\002\000\014\012\uffe0\023" +
    "\uffe0\024\uffe0\037\uffe0\040\uffe0\001\002\000\010\002\ufff7" +
    "\010\ufff7\043\ufff7\001\002\000\006\002\ufffb\010\ufffb\001" +
    "\002\000\004\006\137\001\002\000\012\012\036\023\037" +
    "\024\034\040\033\001\002\000\016\004\042\005\043\006" +
    "\046\014\044\022\052\036\056\001\002\000\016\004\042" +
    "\005\043\006\046\014\044\022\052\036\056\001\002\000" +
    "\014\012\uffe1\023\uffe1\024\uffe1\037\uffe1\040\uffe1\001\002" +
    "\000\016\004\042\005\043\006\046\014\044\022\052\036" +
    "\056\001\002\000\004\006\040\001\002\000\014\012\uffe2" +
    "\023\uffe2\024\uffe2\037\uffe2\040\uffe2\001\002\000\032\002" +
    "\uffdc\010\uffdc\011\uffdc\020\112\021\uffdc\025\uffdc\034\uffdc" +
    "\037\uffdc\041\uffdc\042\uffdc\043\uffdc\054\uffdc\001\002\000" +
    "\070\002\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\054\uffc8\001\002\000\070\002\uffc7\010\uffc7\011\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\054\uffc7\001\002\000\016" +
    "\004\uffb9\005\uffb9\006\uffb9\014\uffb9\022\uffb9\036\uffb9\001" +
    "\002\000\012\002\uffe3\010\uffe3\021\107\043\uffe3\001\002" +
    "\000\070\002\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\054\uffc9\001\002\000\070\002\uffcb\010\uffcb\011" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\054\uffcb\001\002\000" +
    "\070\002\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\117\024\034\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\036\115\037\uffd0\040\033\041\uffd0\042\uffd0\043" +
    "\uffd0\054\uffd0\001\002\000\060\002\uffd2\010\uffd2\011\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2\054" +
    "\uffd2\001\002\000\016\004\uffb8\005\uffb8\006\uffb8\014\uffb8" +
    "\022\uffb8\036\uffb8\001\002\000\060\002\uffd4\010\uffd4\011" +
    "\uffd4\013\uffd4\014\uffd4\015\100\016\101\017\077\020\uffd4" +
    "\021\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\054\uffd4\001\002\000\016\004\042\005\043\006\046\014" +
    "\044\022\052\036\056\001\002\000\052\002\uffd6\010\uffd6" +
    "\011\uffd6\013\073\014\074\020\uffd6\021\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\037\uffd6\041\uffd6\042\uffd6\043\uffd6\054\uffd6\001\002\000" +
    "\016\004\042\005\043\006\046\014\044\022\052\036\056" +
    "\001\002\000\046\002\uffd8\010\uffd8\011\uffd8\020\uffd8\021" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\070\031\067\032\071" +
    "\033\066\034\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\054" +
    "\uffd8\001\002\000\036\002\uffda\010\uffda\011\uffda\020\uffda" +
    "\021\uffda\025\uffda\026\061\027\063\034\uffda\037\uffda\041" +
    "\uffda\042\uffda\043\uffda\054\uffda\001\002\000\016\004\uffc4" +
    "\005\uffc4\006\uffc4\014\uffc4\022\uffc4\036\uffc4\001\002\000" +
    "\016\004\042\005\043\006\046\014\044\022\052\036\056" +
    "\001\002\000\016\004\uffc3\005\uffc3\006\uffc3\014\uffc3\022" +
    "\uffc3\036\uffc3\001\002\000\046\002\uffd9\010\uffd9\011\uffd9" +
    "\020\uffd9\021\uffd9\025\uffd9\026\uffd9\027\uffd9\030\070\031" +
    "\067\032\071\033\066\034\uffd9\037\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\054\uffd9\001\002\000\016\004\042\005\043\006" +
    "\046\014\044\022\052\036\056\001\002\000\016\004\uffc2" +
    "\005\uffc2\006\uffc2\014\uffc2\022\uffc2\036\uffc2\001\002\000" +
    "\016\004\uffc0\005\uffc0\006\uffc0\014\uffc0\022\uffc0\036\uffc0" +
    "\001\002\000\016\004\uffbf\005\uffbf\006\uffbf\014\uffbf\022" +
    "\uffbf\036\uffbf\001\002\000\016\004\uffc1\005\uffc1\006\uffc1" +
    "\014\uffc1\022\uffc1\036\uffc1\001\002\000\052\002\uffd7\010" +
    "\uffd7\011\uffd7\013\073\014\074\020\uffd7\021\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\054\uffd7\001\002" +
    "\000\016\004\uffbe\005\uffbe\006\uffbe\014\uffbe\022\uffbe\036" +
    "\uffbe\001\002\000\016\004\uffbd\005\uffbd\006\uffbd\014\uffbd" +
    "\022\uffbd\036\uffbd\001\002\000\016\004\042\005\043\006" +
    "\046\014\044\022\052\036\056\001\002\000\060\002\uffd5" +
    "\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\100\016\101\017" +
    "\077\020\uffd5\021\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\054\uffd5\001\002\000\016\004\uffba\005\uffba" +
    "\006\uffba\014\uffba\022\uffba\036\uffba\001\002\000\016\004" +
    "\uffbc\005\uffbc\006\uffbc\014\uffbc\022\uffbc\036\uffbc\001\002" +
    "\000\016\004\uffbb\005\uffbb\006\uffbb\014\uffbb\022\uffbb\036" +
    "\uffbb\001\002\000\016\004\042\005\043\006\046\014\044" +
    "\022\052\036\056\001\002\000\060\002\uffd3\010\uffd3\011" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\054\uffd3\001\002\000\006\021\107\037\106\001\002\000" +
    "\016\004\042\005\043\006\046\014\044\022\052\036\056" +
    "\001\002\000\070\002\uffca\010\uffca\011\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\054\uffca\001\002\000\016\004\uffc6\005" +
    "\uffc6\006\uffc6\014\uffc6\022\uffc6\036\uffc6\001\002\000\032" +
    "\002\uffdd\010\uffdd\011\uffdd\020\112\021\uffdd\025\uffdd\034" +
    "\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\054\uffdd\001\002" +
    "\000\016\004\042\005\043\006\046\014\044\022\052\036" +
    "\056\001\002\000\016\004\uffc5\005\uffc5\006\uffc5\014\uffc5" +
    "\022\uffc5\036\uffc5\001\002\000\036\002\uffdb\010\uffdb\011" +
    "\uffdb\020\uffdb\021\uffdb\025\uffdb\026\061\027\063\034\uffdb" +
    "\037\uffdb\041\uffdb\042\uffdb\043\uffdb\054\uffdb\001\002\000" +
    "\060\002\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\037\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\054\uffd1\001\002\000\020\004" +
    "\042\005\043\006\046\014\044\022\052\036\056\037\121" +
    "\001\002\000\070\002\uffce\010\uffce\011\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\054\uffce\001\002\000\004\006\120\001" +
    "\002\000\070\002\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\054\uffcf\001\002\000\070\002\uffcc\010\uffcc" +
    "\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\054\uffcc\001\002" +
    "\000\006\011\124\037\125\001\002\000\010\011\uffb0\021" +
    "\107\037\uffb0\001\002\000\016\004\042\005\043\006\046" +
    "\014\044\022\052\036\056\001\002\000\070\002\uffcd\010" +
    "\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\054\uffcd\001" +
    "\002\000\010\011\uffb1\021\107\037\uffb1\001\002\000\006" +
    "\021\107\041\130\001\002\000\072\002\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\054\uffb3\001" +
    "\002\000\012\021\107\025\134\034\132\041\133\001\002" +
    "\000\016\004\042\005\043\006\046\014\044\022\052\036" +
    "\056\001\002\000\072\002\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\054\uffb5\001\002\000\072" +
    "\002\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\054\uffb4\001\002\000\006\021\107\041\136\001" +
    "\002\000\072\002\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\054\uffb2\001\002\000\004\034\143" +
    "\001\002\000\012\002\ufff0\010\ufff0\012\141\043\ufff0\001" +
    "\002\000\016\004\042\005\043\006\046\014\044\022\052" +
    "\036\056\001\002\000\012\002\uffef\010\uffef\021\107\043" +
    "\uffef\001\002\000\004\007\145\001\002\000\022\002\uffab" +
    "\010\uffab\011\uffab\012\uffab\037\uffab\040\146\042\uffab\043" +
    "\uffab\001\002\000\022\002\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\037\uffb6\040\uffb6\042\uffb6\043\uffb6\001\002\000\004\004" +
    "\147\001\002\000\004\041\150\001\002\000\022\002\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\037\uffb7\040\uffb7\042\uffb7\043" +
    "\uffb7\001\002\000\004\053\152\001\002\000\016\004\042" +
    "\005\043\006\046\014\044\022\052\036\056\001\002\000" +
    "\006\021\107\054\154\001\002\000\016\004\042\005\043" +
    "\006\046\014\044\022\052\036\056\001\002\000\006\021" +
    "\107\042\013\001\002\000\010\002\uffe4\010\uffe4\043\uffe4" +
    "\001\002\000\004\036\160\001\002\000\006\006\137\037" +
    "\uffae\001\002\000\006\011\171\037\uffaf\001\002\000\004" +
    "\037\164\001\002\000\006\011\uffac\037\uffac\001\002\000" +
    "\006\035\166\042\013\001\002\000\010\002\uffed\010\uffed" +
    "\043\uffed\001\002\000\004\006\137\001\002\000\004\042" +
    "\013\001\002\000\010\002\uffec\010\uffec\043\uffec\001\002" +
    "\000\004\006\137\001\002\000\006\011\uffad\037\uffad\001" +
    "\002\000\006\010\175\043\176\001\002\000\006\010\uffa5" +
    "\043\uffa5\001\002\000\020\006\015\036\012\042\013\045" +
    "\031\047\011\051\006\052\025\001\002\000\012\002\uffea" +
    "\010\uffea\043\uffea\050\uffea\001\002\000\006\010\uffa6\043" +
    "\uffa6\001\002\000\012\023\037\024\034\037\201\040\033" +
    "\001\002\000\014\012\uffdf\023\uffdf\024\uffdf\037\uffdf\040" +
    "\uffdf\001\002\000\006\021\107\042\013\001\002\000\012" +
    "\002\uffe6\010\uffe6\043\uffe6\050\204\001\002\000\006\042" +
    "\013\047\011\001\002\000\010\002\uffe9\010\uffe9\043\uffe9" +
    "\001\002\000\010\002\uffe7\010\uffe7\043\uffe7\001\002\000" +
    "\010\002\uffe8\010\uffe8\043\uffe8\001\002\000\030\002\ufffd" +
    "\006\015\010\ufffd\036\012\042\013\044\020\045\031\046" +
    "\005\047\011\051\006\052\025\001\002\000\004\002\000" +
    "\001\002\000\006\002\001\010\001\001\002\000\006\002" +
    "\ufffe\010\ufffe\001\002\000\006\002\uffff\010\uffff\001\002" +
    "\000\006\021\107\042\013\001\002\000\010\002\uffe5\010" +
    "\uffe5\043\uffe5\001\002\000\004\042\220\001\002\000\006" +
    "\044\020\045\221\001\002\000\004\006\137\001\002\000" +
    "\006\010\225\043\226\001\002\000\006\010\uffa8\043\uffa8" +
    "\001\002\000\006\010\uffa7\043\uffa7\001\002\000\006\044" +
    "\020\045\221\001\002\000\006\002\uffeb\010\uffeb\001\002" +
    "\000\006\010\uffaa\043\uffaa\001\002\000\006\010\uffa9\043" +
    "\uffa9\001\002\000\006\010\uffee\043\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\036\002\006\003\013\004\027\005\007\007" +
    "\020\010\015\011\016\012\021\013\023\014\026\015\003" +
    "\016\022\037\031\040\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\017\214\020\040\021\057\022\056" +
    "\023\054\024\052\025\050\026\047\027\046\036\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\017\201" +
    "\020\040\021\057\022\056\023\054\024\052\025\050\026" +
    "\047\027\046\036\053\001\001\000\006\037\177\040\025" +
    "\001\001\000\026\003\173\005\007\012\021\013\023\014" +
    "\026\015\003\016\022\037\031\040\025\050\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\137\001\001\000\004\042\034\001\001\000" +
    "\026\017\130\020\040\021\057\022\056\023\054\024\052" +
    "\025\050\026\047\027\046\036\053\001\001\000\026\017" +
    "\126\020\040\021\057\022\056\023\054\024\052\025\050" +
    "\026\047\027\046\036\053\001\001\000\002\001\001\000" +
    "\026\017\044\020\040\021\057\022\056\023\054\024\052" +
    "\025\050\026\047\027\046\036\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\101\001\001\000\012\025\113\026\047\027\046" +
    "\036\053\001\001\000\004\034\074\001\001\000\026\017" +
    "\103\020\040\021\057\022\056\023\054\024\052\025\050" +
    "\026\047\027\046\036\053\001\001\000\004\033\064\001" +
    "\001\000\004\032\061\001\001\000\002\001\001\000\020" +
    "\022\063\023\054\024\052\025\050\026\047\027\046\036" +
    "\053\001\001\000\002\001\001\000\004\033\064\001\001" +
    "\000\016\023\071\024\052\025\050\026\047\027\046\036" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\075\025\050" +
    "\026\047\027\046\036\053\001\001\000\004\035\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\102\026\047\027\046\036\053\001\001\000" +
    "\002\001\001\000\004\030\104\001\001\000\024\020\107" +
    "\021\057\022\056\023\054\024\052\025\050\026\047\027" +
    "\046\036\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\110\001\001\000\022\021\112\022\056\023" +
    "\054\024\052\025\050\026\047\027\046\036\053\001\001" +
    "\000\002\001\001\000\004\032\061\001\001\000\002\001" +
    "\001\000\030\017\122\020\040\021\057\022\056\023\054" +
    "\024\052\025\050\026\047\027\046\036\053\043\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\104\001" +
    "\001\000\026\017\125\020\040\021\057\022\056\023\054" +
    "\024\052\025\050\026\047\027\046\036\053\001\001\000" +
    "\002\001\001\000\004\030\104\001\001\000\004\030\104" +
    "\001\001\000\002\001\001\000\004\030\104\001\001\000" +
    "\026\017\134\020\040\021\057\022\056\023\054\024\052" +
    "\025\050\026\047\027\046\036\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\017" +
    "\141\020\040\021\057\022\056\023\054\024\052\025\050" +
    "\026\047\027\046\036\053\001\001\000\004\030\104\001" +
    "\001\000\004\041\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\017\152\020\040\021\057" +
    "\022\056\023\054\024\052\025\050\026\047\027\046\036" +
    "\053\001\001\000\004\030\104\001\001\000\026\017\154" +
    "\020\040\021\057\022\056\023\054\024\052\025\050\026" +
    "\047\027\046\036\053\001\001\000\006\012\155\030\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\161\045\160\046\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\164\001\001\000" +
    "\002\001\001\000\004\046\166\001\001\000\004\012\167" +
    "\001\001\000\002\001\001\000\004\046\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\176\005\007\012\021\013\023\014\026\015\003\016" +
    "\022\037\031\040\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\034\001\001\000\002\001\001\000" +
    "\006\012\202\030\104\001\001\000\004\051\204\001\001" +
    "\000\006\012\205\013\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\211\004\213" +
    "\005\007\007\020\010\015\011\212\012\021\013\023\014" +
    "\026\015\003\016\022\037\031\040\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\215\030\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\222\006\223\007\020\010" +
    "\015\047\221\001\001\000\004\046\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\226\006\227\007\020\010\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$YogurParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$YogurParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$YogurParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private List<CompilationException> exceptions = new ArrayList<>();

	public List<CompilationException> getExceptions() {
		return exceptions;
	}

	public void syntax_error(Symbol symbol) {
		exceptions.add(new CompilationException(symbol, CompilationException.Scope.SyntacticalAnalyzer));
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$YogurParser$actions {
  private final YogurParser parser;

  /** Constructor */
  CUP$YogurParser$actions(YogurParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$YogurParser$do_action_part00000000(
    int                        CUP$YogurParser$act_num,
    java_cup.runtime.lr_parser CUP$YogurParser$parser,
    java.util.Stack            CUP$YogurParser$stack,
    int                        CUP$YogurParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$YogurParser$result;

      /* select the action based on the action number */
      switch (CUP$YogurParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= S DELIMITER Inst 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((Program)p, (StatementOrDeclaration)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		RESULT = start_val;
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$YogurParser$parser.done_parsing();
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= S DELIMITER Dec 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((Program)p, (StatementOrDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= S DELIMITER DClass 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((Program)p, (StatementOrDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= S DELIMITER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = p; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= Inst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((StatementOrDeclaration)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= Dec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((StatementOrDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= DClass 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Program((StatementOrDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= 
            {
              Object RESULT =null;
		 RESULT = new Program(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Inst ::= If 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Inst ::= While 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Inst ::= For 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Inst ::= Ass 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Inst ::= Block 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inst ::= DVar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = i; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Dec ::= DProc 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Dec",2, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Dec ::= DFunc 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Dec",2, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DVar ::= VAR Arg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new VarDeclaration((Argument)a); ((AbstractTreeNode)RESULT).setLineCol(aleft, aright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DVar",3, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DVar ::= VAR Arg ASSIGN Exp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new VarDeclaration((Argument)a, (Expression)e); ((AbstractTreeNode)RESULT).setLineCol(aleft, aright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DVar",3, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DVarN ::= VAR Arg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new VarDeclaration((Argument)a); ((AbstractTreeNode)RESULT).setLineCol(aleft, aright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DVarN",4, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DProc ::= DEF ID LPAREN ArgList RPAREN Block 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new FuncDeclaration((String)id, (List<Argument>)args, (Block)b); ((AbstractTreeNode)RESULT).setLineCol(idleft, idright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DProc",5, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DFunc ::= DEF ID LPAREN ArgList RPAREN ARROW Arg Block 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)).value;
		int rargleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int rargright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object rarg = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new FuncDeclaration((String)id, (List<Argument>)args, (Argument)rarg, (Block)b); ((AbstractTreeNode)RESULT).setLineCol(idleft, idright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DFunc",6, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-7)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DClass ::= CLASS TYPE LBRACKET ClassBody RBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ClassDeclaration((String)t, (List<FunctionOrVarDeclaration>)insts); ((AbstractTreeNode)RESULT).setLineCol(tleft, tright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("DClass",7, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Block ::= LBRACKET BlockBody RBRACKET 
            {
              Object RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object insts = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new Block((List<Statement>)insts); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Block",8, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // If ::= IF Exp Block Else 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int elseeleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int elseeright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object elsee = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new IfStructure((Expression)exp, (Block)b, (Block)elsee); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("If",9, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Else ::= ELSE If 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 List<Statement> insts = new ArrayList<Statement>(); insts.add((IfStructure)ife); RESULT = new Block(insts); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",39, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Else ::= ELSE Block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",39, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Else ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Else",39, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // While ::= WHILE Exp Block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new WhileStructure((Expression)e, (Block)b); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("While",10, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // For ::= FOR ID IN Exp TO Exp Block 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ForStructure(new BaseDeclarator((String)id), (Expression)start, (Expression)end, (Block)b); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("For",11, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-6)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Ass ::= Declarator ASSIGN Exp 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Assignment((Declarator)d, (Expression)e); ((AbstractTreeNode)RESULT).setLineCol(eqleft, eqright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Ass",12, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declarator ::= Declarator DOT ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new DotDeclarator((Declarator)d, (String)id); ((AbstractTreeNode)RESULT).setLineCol(dtleft, dtright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declarator ::= Declarator Index 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayDeclarator((Declarator)d, (ArrayIndex)i); ((AbstractTreeNode)RESULT).setLineCol(ileft, iright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declarator ::= Declarator0 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator",29, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Declarator0 ::= LPAREN Declarator RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = d; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator0",30, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Declarator0 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BaseDeclarator((String)id); ((AbstractTreeNode)RESULT).setLineCol(idleft, idright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Declarator0",30, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp Op Exp0 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, (BinaryOperation.Operator)o); ((AbstractTreeNode)RESULT).setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp0 ::= Exp0 Op0 Exp1 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, (BinaryOperation.Operator)o); ((AbstractTreeNode)RESULT).setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp0",14, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp0 ::= Exp1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp0",14, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp1 ::= Exp1 Op1 Exp2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, (BinaryOperation.Operator)o); ((AbstractTreeNode)RESULT).setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp1",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp1 ::= Exp2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp1",15, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp2 ::= Exp2 Op2 Exp3 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, (BinaryOperation.Operator)o); ((AbstractTreeNode)RESULT).setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",16, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp2 ::= Exp3 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp2",16, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp3 ::= Exp3 Op3 Exp4 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, (BinaryOperation.Operator)o); ((AbstractTreeNode)RESULT).setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp3",17, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp3 ::= Exp4 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp3",17, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp4 ::= Exp4 Op4 Exp5 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BinaryOperation((Expression)e1, (Expression)e2, (BinaryOperation.Operator)o); ((AbstractTreeNode)RESULT).setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp4",18, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp4 ::= Exp5 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp4",18, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp5 ::= Op5 Exp5 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new UnaryOperation((Expression)e, (UnaryOperation.Operator)o); ((AbstractTreeNode)RESULT).setLineCol(oleft, oright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp5",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp5 ::= Exp6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp5",19, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp6 ::= Exp6 DOT ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new DotIdentifier((Expression)e, (String)id); ((AbstractTreeNode)RESULT).setLineCol(dleft, dright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp6 ::= Exp6 Index 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayIdentifier((Expression)e, (ArrayIndex)i); ((AbstractTreeNode)RESULT).setLineCol(ileft, iright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp6 ::= Exp6 LPAREN CommaExp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new FunctionCall((Expression)e, (List<Expression>)exps); ((AbstractTreeNode)RESULT).setLineCol(lleft, lright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp6 ::= Exp6 LPAREN RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new FunctionCall((Expression)e, new ArrayList<Expression>()); ((AbstractTreeNode)RESULT).setLineCol(lleft, lright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp6 ::= Exp7 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp6",20, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exp7 ::= LPAREN Exp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = e; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Exp7 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new BaseIdentifier((String)id); ((AbstractTreeNode)RESULT).setLineCol(idleft, idright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Exp7 ::= INT 
            {
              Object RESULT =null;
		int intLitleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int intLitright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object intLit = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Constant(intLit); ((AbstractTreeNode)RESULT).setLineCol(intLitleft, intLitright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Exp7 ::= BOOL 
            {
              Object RESULT =null;
		int boolLitleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int boolLitright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object boolLit = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Constant(boolLit); ((AbstractTreeNode)RESULT).setLineCol(boolLitleft, boolLitright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Exp7",21, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Op ::= OR 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.OR; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op",22, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Op0 ::= AND 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.AND; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op0",23, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Op1 ::= EQ 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.EQ; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op1",24, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Op1 ::= NEQ 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.NEQ; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op1",24, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Op2 ::= LT 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.LT; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op2",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Op2 ::= LEQ 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.LEQ; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op2",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Op2 ::= GT 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.GT; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op2",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Op2 ::= GEQ 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.GEQ; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op2",25, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Op3 ::= SUM 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.SUM; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op3",26, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Op3 ::= SUBS 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.SUBS; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op3",26, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Op4 ::= PROD 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.PROD; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op4",27, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Op4 ::= DIV 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.DIV; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op4",27, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Op4 ::= MOD 
            {
              Object RESULT =null;
		 RESULT = BinaryOperation.Operator.MOD; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op4",27, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Op5 ::= SUBS 
            {
              Object RESULT =null;
		 RESULT = UnaryOperation.Operator.NEG; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op5",28, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Op5 ::= NOT 
            {
              Object RESULT =null;
		 RESULT = UnaryOperation.Operator.NOT; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Op5",28, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VarType ::= VarType LSQUARE INT RSQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayType((Type)t, (Integer)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("VarType",31, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VarType ::= TYPE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = Type.fromName((String)t); ((AbstractTreeNode)RESULT).setLineCol(tleft, tright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("VarType",31, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Index ::= LSQUARE Exp RSQUARE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIndex((Expression)e, ArrayIndex.AccessType.INDEX); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Index",32, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Index ::= LSQUARE Exp RRANGE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIndex((Expression)e, ArrayIndex.AccessType.LEFT_RANGE); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Index",32, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Index ::= LRANGE Exp RSQUARE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIndex((Expression)e, ArrayIndex.AccessType.RIGHT_RANGE); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Index",32, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Index ::= LSQUARE Exp COLON Exp RSQUARE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		 RESULT = new ArrayIndex((Expression)e1, (Expression)e2, ArrayIndex.AccessType.LEFT_RIGHT_RANGE); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Index",32, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-4)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CommaExp ::= CommaExp COMMA Exp 
            {
              Object RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object exps = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<Expression>)exps).add((Expression)e); RESULT = exps; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("CommaExp",33, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CommaExp ::= Exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); ((List<Expression>)RESULT).add((Expression)e); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("CommaExp",33, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ArgList ::= Args 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = args; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ArgList",34, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ArgList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Argument>(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ArgList",34, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Args ::= Args COMMA Arg 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<Argument>)args).add((Argument)arg); RESULT = args; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Args",35, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Args ::= Arg 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<Argument>(); ((List<Argument>)RESULT).add((Argument)arg); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Args",35, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Arg ::= ID COLON VarType 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new Argument((String)id, (Type)t); ((AbstractTreeNode)RESULT).setLineCol(cleft, cright); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("Arg",36, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ClassBody ::= ClassBody DELIMITER Dec 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<FunctionOrVarDeclaration>)b).add((FuncDeclaration)d); RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",37, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ClassBody ::= ClassBody DELIMITER DVarN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<FunctionOrVarDeclaration>)b).add((VarDeclaration)d); RESULT = b; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",37, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ClassBody ::= Dec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<FunctionOrVarDeclaration>(); ((List<FunctionOrVarDeclaration>)RESULT).add((FuncDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",37, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ClassBody ::= DVarN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<FunctionOrVarDeclaration>(); ((List<FunctionOrVarDeclaration>)RESULT).add((VarDeclaration)d); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("ClassBody",37, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BlockBody ::= BlockBody DELIMITER Inst 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 ((List<Statement>)is).add((Statement)i); RESULT = is; 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",38, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.elementAt(CUP$YogurParser$top-2)), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BlockBody ::= Inst 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YogurParser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); ((List<Statement>)RESULT).add((Statement)i); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",38, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BlockBody ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Statement>(); 
              CUP$YogurParser$result = parser.getSymbolFactory().newSymbol("BlockBody",38, ((java_cup.runtime.Symbol)CUP$YogurParser$stack.peek()), RESULT);
            }
          return CUP$YogurParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$YogurParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$YogurParser$do_action(
    int                        CUP$YogurParser$act_num,
    java_cup.runtime.lr_parser CUP$YogurParser$parser,
    java.util.Stack            CUP$YogurParser$stack,
    int                        CUP$YogurParser$top)
    throws java.lang.Exception
    {
              return CUP$YogurParser$do_action_part00000000(
                               CUP$YogurParser$act_num,
                               CUP$YogurParser$parser,
                               CUP$YogurParser$stack,
                               CUP$YogurParser$top);
    }
}

}
