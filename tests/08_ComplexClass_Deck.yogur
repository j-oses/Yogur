// Una clase que representa una baraja de cartas.
// Para probar clases anidadas, llamadas a funciones de clase...

// The RNG seed
var seed: Int = 23456

// A mod function
def mod(a: Int, b: Int) -> m: Int {
	m = a - (a / b) * b
}

// A function which generates a pseudorandom value using a linear generator
def random() -> n: Int {
    seed = mod(seed * 15245 + 3784, 0xffff)
    n = seed
}

// Class representing a card of a small deck
class Card {
	var suit: Int	// 0 to 3
	var num: Int	// 1 to 5

	def copy(another: Card) {
		suit = another.suit
		num = another.num
	}
}

// Class representing a deck of 20 cards
class Deck {
	var cards: Card[20]
	var currentN: Int

	def generateDeck() {
		for suit in 0 to 3 {
			for num in 1 to 5 {
				var ind: Int = suit * 5 + num - 1
				cards[ind].suit = suit
				cards[ind].num = num
			}
		}
		currentN = 20
	}

	// Fisher-Yates algorithm
	def shuffle() {
		for i in 0 to (currentN - 2) {
			// i <= j < n
			var j: Int = mod(random(), (currentN - i)) + i
			swapAt(i, j)
		}
	}

	def swapAt(i: Int, j: Int) {
		var aux: Card
		aux.copy(cards[i])
		cards[i].copy(cards[j])
		cards[j].copy(aux)
	}

	def getTopCard(result: Card) -> success: Bool {
		if (currentN > 0) {
			currentN = currentN - 1
			result.copy(cards[currentN])
			success = true
		} else {
			success = false
		}
	}
}

var deck: Deck
deck.generateDeck()
deck.shuffle()
var card: Card
var success: Bool = deck.getTopCard(card)